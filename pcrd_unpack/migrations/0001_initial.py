# Generated by Django 2.0.2 on 2018-03-21 06:31

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActualUnitBackground',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('bg_id', models.IntegerField()),
                ('face_type', models.IntegerField()),
            ],
            options={
                'db_table': 'actual_unit_background',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AilmentData',
            fields=[
                ('ailment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ailment_action', models.IntegerField()),
                ('ailment_detail_1', models.IntegerField()),
                ('ailment_name', models.TextField()),
            ],
            options={
                'db_table': 'ailment_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumProductionList',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('type', models.IntegerField()),
                ('title', models.TextField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'album_production_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumVoiceList',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('voice_id', models.TextField()),
                ('title', models.TextField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'album_voice_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ArenaDailyRankReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'arena_daily_rank_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ArenaDefenceReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('limit_count', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'arena_defence_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ArenaMaxRankReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'arena_max_rank_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('banner_id', models.IntegerField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('system_id', models.IntegerField()),
                ('priority', models.IntegerField()),
                ('start_date', models.TextField()),
                ('end_date', models.TextField()),
            ],
            options={
                'db_table': 'banner',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BgData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_name', models.TextField(unique=True)),
                ('bg_id', models.IntegerField()),
                ('event_id', models.IntegerField()),
            ],
            options={
                'db_table': 'bg_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CampaignSchedule',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('campaign_category', models.IntegerField()),
                ('value', models.FloatField()),
                ('system_id', models.IntegerField()),
                ('icon_image', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'campaign_schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterLoveRankupText',
            fields=[
                ('chara_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('love_level', models.IntegerField()),
                ('scale', models.FloatField()),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('voice_id_1', models.IntegerField()),
                ('face_1', models.IntegerField()),
                ('serif_1', models.TextField()),
                ('voice_id_2', models.IntegerField()),
                ('face_2', models.IntegerField()),
                ('serif_2', models.TextField()),
                ('voice_id_3', models.IntegerField()),
                ('face_3', models.IntegerField()),
                ('serif_3', models.TextField()),
            ],
            options={
                'db_table': 'character_love_rankup_text',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharaStoryStatus',
            fields=[
                ('story_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unlock_story_name', models.TextField()),
                ('status_type_1', models.IntegerField()),
                ('status_rate_1', models.IntegerField()),
                ('status_type_2', models.IntegerField()),
                ('status_rate_2', models.IntegerField()),
                ('status_type_3', models.IntegerField()),
                ('status_rate_3', models.IntegerField()),
                ('status_type_4', models.IntegerField()),
                ('status_rate_4', models.IntegerField()),
                ('status_type_5', models.IntegerField()),
                ('status_rate_5', models.IntegerField()),
                ('chara_id_1', models.IntegerField()),
                ('chara_id_2', models.IntegerField()),
                ('chara_id_3', models.IntegerField()),
                ('chara_id_4', models.IntegerField()),
                ('chara_id_5', models.IntegerField()),
                ('chara_id_6', models.IntegerField()),
                ('chara_id_7', models.IntegerField()),
                ('chara_id_8', models.IntegerField()),
                ('chara_id_9', models.IntegerField()),
                ('chara_id_10', models.IntegerField()),
            ],
            options={
                'db_table': 'chara_story_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleBossDamageRank',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('damage_rank_id', models.IntegerField()),
                ('ranking_from', models.IntegerField()),
                ('ranking_to', models.IntegerField()),
                ('odds_group_id', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_boss_damage_rank',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleBossData',
            fields=[
                ('boss_id', models.IntegerField(primary_key=True, serialize=False)),
                ('clan_battle_id', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('order_num', models.IntegerField()),
                ('boss_thumb_id', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_boss_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleBossFixReward',
            fields=[
                ('fix_reward_id', models.IntegerField(primary_key=True, serialize=False)),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_boss_fix_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleBossGroup',
            fields=[
                ('clan_battle_boss_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('order_num', models.IntegerField()),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('scale_ratio', models.FloatField()),
                ('map_position_x', models.IntegerField()),
                ('map_position_y', models.IntegerField()),
                ('cursor_position', models.IntegerField()),
                ('result_boss_position_y', models.IntegerField()),
                ('chest_id', models.IntegerField()),
                ('fix_reward_id', models.IntegerField()),
                ('damage_rank_id', models.IntegerField()),
                ('quest_detail_bg_id', models.IntegerField()),
                ('quest_detail_bg_position', models.IntegerField()),
                ('quest_detail_monster_size', models.FloatField()),
                ('quest_detail_monster_height', models.IntegerField()),
                ('battle_report_monster_size', models.FloatField()),
                ('battle_report_monster_height', models.IntegerField()),
                ('background', models.IntegerField()),
                ('wave_group_id', models.IntegerField()),
                ('reward_gold_coefficient', models.FloatField()),
                ('limited_mana', models.IntegerField()),
                ('wave_bgm', models.TextField()),
            ],
            options={
                'db_table': 'clan_battle_boss_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleHpResetCost',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('reset_count_from', models.IntegerField()),
                ('reset_count_to', models.IntegerField()),
                ('cost_num', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_hp_reset_cost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleMapData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clan_battle_id', models.IntegerField()),
                ('map_bg', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('lap_num_from', models.IntegerField()),
                ('lap_num_to', models.IntegerField()),
                ('clan_battle_boss_group_id', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_map_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleOddsData',
            fields=[
                ('odds_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_level_from', models.IntegerField()),
                ('team_level_to', models.IntegerField()),
                ('odds_csv_1', models.TextField()),
                ('odds_csv_2', models.TextField()),
                ('odds_csv_3', models.TextField()),
                ('odds_csv_4', models.TextField()),
                ('odds_csv_5', models.TextField()),
                ('odds_csv_6', models.TextField()),
                ('odds_csv_7', models.TextField()),
                ('odds_csv_8', models.TextField()),
                ('odds_csv_9', models.TextField()),
                ('odds_csv_10', models.TextField()),
            ],
            options={
                'db_table': 'clan_battle_odds_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattlePeriod',
            fields=[
                ('clan_battle_id', models.IntegerField(primary_key=True, serialize=False)),
                ('period', models.IntegerField()),
                ('period_detail', models.TextField()),
                ('period_detail_bg', models.IntegerField()),
                ('period_detail_bg_position', models.IntegerField()),
                ('period_detail_boss_position_x', models.IntegerField()),
                ('period_detail_boss_position_y', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('interval_start', models.TextField()),
                ('interval_end', models.TextField()),
                ('calc_start', models.TextField()),
                ('result_start', models.TextField()),
                ('result_end', models.TextField()),
            ],
            options={
                'db_table': 'clan_battle_period',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattlePeriodRankBonus',
            fields=[
                ('ranking_bonus_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_period_rank_bonus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattlePeriodRankReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clan_battle_id', models.IntegerField()),
                ('period', models.IntegerField()),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('ranking_bonus_group', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_period_rank_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleSchedule',
            fields=[
                ('clan_battle_id', models.IntegerField(primary_key=True, serialize=False)),
                ('release_month', models.IntegerField()),
                ('last_clan_battle_id', models.IntegerField()),
                ('point_per_stamina', models.IntegerField()),
                ('cost_group_id', models.IntegerField()),
                ('map_bgm', models.TextField()),
                ('resource_id', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'clan_battle_schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanBattleTotalRank',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('clan_battle_id', models.IntegerField()),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_battle_total_rank',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanCostGroup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cost_group_id', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('count', models.IntegerField()),
                ('cost', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_cost_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanGrade',
            fields=[
                ('clan_grade_id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_grade',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ClanInviteLevelGroup',
            fields=[
                ('level_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_level_from', models.IntegerField()),
                ('team_level_to', models.IntegerField()),
            ],
            options={
                'db_table': 'clan_invite_level_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ContentReleaseData',
            fields=[
                ('system_id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_level', models.IntegerField()),
                ('story_id', models.IntegerField()),
                ('quest_id', models.IntegerField()),
                ('dialog', models.TextField()),
            ],
            options={
                'db_table': 'content_release_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CooperationQuestData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('quest_name', models.TextField()),
                ('difficulty_level', models.IntegerField()),
                ('limit_team_level', models.IntegerField()),
                ('team_exp', models.IntegerField()),
                ('exp', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('clear_reward_group_id', models.IntegerField()),
                ('odds_group_id', models.IntegerField()),
                ('lobby_background', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_group_id_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('background_2', models.IntegerField()),
                ('wave_group_id_2', models.IntegerField()),
                ('wave_bgm_sheet_id_2', models.TextField()),
                ('wave_bgm_que_id_2', models.TextField()),
                ('background_3', models.IntegerField()),
                ('wave_group_id_3', models.IntegerField()),
                ('wave_bgm_sheet_id_3', models.TextField()),
                ('wave_bgm_que_id_3', models.TextField()),
                ('enemy_image_1', models.IntegerField()),
                ('enemy_image_2', models.IntegerField()),
                ('enemy_image_3', models.IntegerField()),
                ('enemy_image_4', models.IntegerField()),
                ('enemy_image_5', models.IntegerField()),
                ('first_reward_image_1', models.IntegerField()),
                ('first_reward_image_2', models.IntegerField()),
                ('first_reward_image_3', models.IntegerField()),
                ('first_reward_image_4', models.IntegerField()),
                ('first_reward_image_5', models.IntegerField()),
                ('repeat_reward_image_1', models.IntegerField()),
                ('repeat_reward_image_2', models.IntegerField()),
                ('repeat_reward_image_3', models.IntegerField()),
                ('cooperation_quest_detail_bg_id', models.IntegerField()),
                ('cooperation_quest_detail_bg_position', models.IntegerField()),
                ('main_enemy_image_wave_1', models.IntegerField()),
                ('sub_enemy_image_wave_1_1', models.IntegerField()),
                ('sub_enemy_image_wave_1_2', models.IntegerField()),
                ('sub_enemy_image_wave_1_3', models.IntegerField()),
                ('sub_enemy_image_wave_1_4', models.IntegerField()),
                ('main_enemy_image_wave_2', models.IntegerField()),
                ('sub_enemy_image_wave_2_1', models.IntegerField()),
                ('sub_enemy_image_wave_2_2', models.IntegerField()),
                ('sub_enemy_image_wave_2_3', models.IntegerField()),
                ('sub_enemy_image_wave_2_4', models.IntegerField()),
                ('main_enemy_image_wave_3', models.IntegerField()),
                ('sub_enemy_image_wave_3_1', models.IntegerField()),
                ('sub_enemy_image_wave_3_2', models.IntegerField()),
                ('sub_enemy_image_wave_3_3', models.IntegerField()),
                ('sub_enemy_image_wave_3_4', models.IntegerField()),
                ('quest_comment', models.TextField()),
                ('unlock_quest_id_1', models.IntegerField()),
                ('unlock_quest_id_2', models.IntegerField()),
            ],
            options={
                'db_table': 'cooperation_quest_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DailyMissionData',
            fields=[
                ('daily_mission_id', models.IntegerField(primary_key=True, serialize=False)),
                ('disp_group', models.IntegerField()),
                ('category_icon', models.IntegerField()),
                ('description', models.TextField()),
                ('mission_condition', models.IntegerField()),
                ('condition_value_1', models.IntegerField(blank=True, null=True)),
                ('condition_value_2', models.IntegerField(blank=True, null=True)),
                ('condition_value_3', models.IntegerField(blank=True, null=True)),
                ('condition_num', models.IntegerField()),
                ('mission_reward_id', models.IntegerField()),
                ('system_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'daily_mission_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonAreaData',
            fields=[
                ('dungeon_area_id', models.IntegerField(primary_key=True, serialize=False)),
                ('dungeon_type', models.IntegerField()),
                ('dungeon_name', models.TextField()),
                ('description', models.TextField()),
                ('open_quest_id', models.IntegerField()),
                ('content_release_story', models.IntegerField()),
                ('initial_clear_story', models.IntegerField()),
                ('wave_group_id', models.IntegerField()),
                ('reward_group_id', models.IntegerField()),
                ('recommend_level', models.IntegerField()),
                ('quest_position_x', models.IntegerField()),
                ('quest_position_y', models.IntegerField()),
                ('icon_id', models.IntegerField()),
                ('coin_item_id', models.IntegerField()),
                ('enemy_image_1', models.IntegerField()),
                ('enemy_image_2', models.IntegerField()),
                ('enemy_image_3', models.IntegerField()),
                ('enemy_image_4', models.IntegerField()),
                ('enemy_image_5', models.IntegerField()),
                ('view_reward_id_1', models.IntegerField()),
                ('view_reward_id_2', models.IntegerField()),
                ('view_reward_id_3', models.IntegerField()),
                ('view_reward_id_4', models.IntegerField()),
                ('view_reward_id_5', models.IntegerField()),
                ('recovery_hp_rate', models.IntegerField()),
                ('recovery_tp_rate', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'dungeon_area_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonQuestData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('dungeon_area_id', models.IntegerField()),
                ('floor_num', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('matching_coefficient', models.FloatField()),
                ('reward_image_1', models.IntegerField()),
                ('reward_image_2', models.IntegerField()),
                ('reward_image_3', models.IntegerField()),
                ('reward_coin', models.IntegerField()),
                ('chest_id', models.IntegerField()),
                ('odds_group_id', models.IntegerField()),
                ('background', models.IntegerField()),
                ('dungeon_quest_detail_bg_id', models.IntegerField()),
                ('dungeon_quest_detail_bg_position', models.IntegerField()),
                ('dungeon_quest_detail_monster_size', models.FloatField()),
                ('dungeon_quest_detail_monster_height', models.FloatField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
            ],
            options={
                'db_table': 'dungeon_quest_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EnemyParameter',
            fields=[
                ('enemy_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('name', models.TextField()),
                ('level', models.IntegerField()),
                ('rarity', models.IntegerField()),
                ('promotion_level', models.IntegerField()),
                ('hp', models.IntegerField()),
                ('atk', models.IntegerField()),
                ('magic_str', models.IntegerField()),
                ('def_field', models.IntegerField(db_column='def')),
                ('magic_def', models.IntegerField()),
                ('physical_critical', models.IntegerField()),
                ('magic_critical', models.IntegerField()),
                ('wave_hp_recovery', models.IntegerField()),
                ('wave_energy_recovery', models.IntegerField()),
                ('dodge', models.IntegerField()),
                ('physical_penetrate', models.IntegerField()),
                ('magic_penetrate', models.IntegerField()),
                ('life_steal', models.IntegerField()),
                ('hp_recovery_rate', models.IntegerField()),
                ('energy_recovery_rate', models.IntegerField()),
                ('energy_reduce_rate', models.IntegerField()),
                ('union_burst_level', models.IntegerField()),
                ('main_skill_lv_1', models.IntegerField()),
                ('main_skill_lv_2', models.IntegerField()),
                ('main_skill_lv_3', models.IntegerField()),
                ('main_skill_lv_4', models.IntegerField()),
                ('main_skill_lv_5', models.IntegerField()),
                ('main_skill_lv_6', models.IntegerField()),
                ('main_skill_lv_7', models.IntegerField()),
                ('main_skill_lv_8', models.IntegerField()),
                ('main_skill_lv_9', models.IntegerField()),
                ('main_skill_lv_10', models.IntegerField()),
                ('ex_skill_lv_1', models.IntegerField()),
                ('ex_skill_lv_2', models.IntegerField()),
                ('ex_skill_lv_3', models.IntegerField()),
                ('ex_skill_lv_4', models.IntegerField()),
                ('ex_skill_lv_5', models.IntegerField()),
                ('resist_status_id', models.IntegerField()),
            ],
            options={
                'db_table': 'enemy_parameter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EnemyRewardData',
            fields=[
                ('drop_reward_id', models.IntegerField(primary_key=True, serialize=False)),
                ('drop_count', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('odds_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('odds_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('odds_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('odds_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
                ('odds_5', models.IntegerField()),
            ],
            options={
                'db_table': 'enemy_reward_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentCraft',
            fields=[
                ('equipment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('crafted_cost', models.IntegerField()),
                ('condition_equipment_id_1', models.IntegerField()),
                ('consume_num_1', models.IntegerField()),
                ('condition_equipment_id_2', models.IntegerField()),
                ('consume_num_2', models.IntegerField()),
                ('condition_equipment_id_3', models.IntegerField()),
                ('consume_num_3', models.IntegerField()),
                ('condition_equipment_id_4', models.IntegerField()),
                ('consume_num_4', models.IntegerField()),
                ('condition_equipment_id_5', models.IntegerField()),
                ('consume_num_5', models.IntegerField()),
                ('condition_equipment_id_6', models.IntegerField()),
                ('consume_num_6', models.IntegerField()),
                ('condition_equipment_id_7', models.IntegerField()),
                ('consume_num_7', models.IntegerField()),
                ('condition_equipment_id_8', models.IntegerField()),
                ('consume_num_8', models.IntegerField()),
                ('condition_equipment_id_9', models.IntegerField()),
                ('consume_num_9', models.IntegerField()),
                ('condition_equipment_id_10', models.IntegerField()),
                ('consume_num_10', models.IntegerField()),
            ],
            options={
                'db_table': 'equipment_craft',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentData',
            fields=[
                ('equipment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('equipment_name', models.TextField()),
                ('description', models.TextField()),
                ('promotion_level', models.IntegerField()),
                ('craft_flg', models.IntegerField()),
                ('equipment_enhance_point', models.IntegerField()),
                ('sale_price', models.IntegerField()),
                ('require_level', models.IntegerField()),
                ('hp', models.FloatField()),
                ('atk', models.FloatField()),
                ('magic_str', models.FloatField()),
                ('def_field', models.FloatField(db_column='def')),
                ('magic_def', models.FloatField()),
                ('physical_critical', models.FloatField()),
                ('magic_critical', models.FloatField()),
                ('wave_hp_recovery', models.FloatField()),
                ('wave_energy_recovery', models.FloatField()),
                ('dodge', models.FloatField()),
                ('physical_penetrate', models.FloatField()),
                ('magic_penetrate', models.FloatField()),
                ('life_steal', models.FloatField()),
                ('hp_recovery_rate', models.FloatField()),
                ('energy_recovery_rate', models.FloatField()),
                ('energy_reduce_rate', models.FloatField()),
                ('enable_donation', models.IntegerField()),
            ],
            options={
                'db_table': 'equipment_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentDonation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_level', models.IntegerField()),
                ('donation_num_once', models.IntegerField()),
                ('donation_num_daily', models.IntegerField()),
                ('request_num_once', models.IntegerField()),
            ],
            options={
                'db_table': 'equipment_donation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentEnhanceData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promotion_level', models.IntegerField()),
                ('equipment_enhance_level', models.IntegerField()),
                ('needed_point', models.IntegerField()),
                ('total_point', models.IntegerField()),
            ],
            options={
                'db_table': 'equipment_enhance_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentEnhanceRate',
            fields=[
                ('equipment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('equipment_name', models.TextField()),
                ('description', models.TextField()),
                ('promotion_level', models.IntegerField()),
                ('hp', models.FloatField()),
                ('atk', models.FloatField()),
                ('magic_str', models.FloatField()),
                ('def_field', models.FloatField(db_column='def')),
                ('magic_def', models.FloatField()),
                ('physical_critical', models.FloatField()),
                ('magic_critical', models.FloatField()),
                ('wave_hp_recovery', models.FloatField()),
                ('wave_energy_recovery', models.FloatField()),
                ('dodge', models.FloatField()),
                ('physical_penetrate', models.FloatField()),
                ('magic_penetrate', models.FloatField()),
                ('life_steal', models.FloatField()),
                ('hp_recovery_rate', models.FloatField()),
                ('energy_recovery_rate', models.FloatField()),
                ('energy_reduce_rate', models.FloatField()),
            ],
            options={
                'db_table': 'equipment_enhance_rate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventBgData',
            fields=[
                ('event_id', models.IntegerField(primary_key=True, serialize=False)),
                ('bg_id', models.IntegerField()),
                ('start_date', models.TextField()),
                ('end_date', models.TextField()),
            ],
            options={
                'db_table': 'event_bg_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventStoryData',
            fields=[
                ('story_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_type', models.IntegerField()),
                ('value', models.IntegerField()),
                ('title', models.TextField()),
                ('thumbnail_id', models.IntegerField()),
                ('disp_order', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'event_story_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExperienceTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_level', models.IntegerField()),
                ('total_exp', models.IntegerField()),
                ('max_stamina', models.IntegerField()),
                ('over_limit_stamina', models.IntegerField()),
                ('recover_stamina_count', models.IntegerField()),
            ],
            options={
                'db_table': 'experience_team',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExperienceUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_level', models.IntegerField()),
                ('total_exp', models.IntegerField()),
            ],
            options={
                'db_table': 'experience_unit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GachaData',
            fields=[
                ('gacha_id', models.IntegerField(primary_key=True, serialize=False)),
                ('gacha_name', models.TextField()),
                ('description', models.TextField()),
                ('gacha_detail', models.IntegerField()),
                ('gacha_cost_type', models.IntegerField()),
                ('price', models.IntegerField()),
                ('free_gacha_type', models.IntegerField()),
                ('free_gacha_interval_time', models.IntegerField()),
                ('free_gacha_count', models.IntegerField()),
                ('discount_price', models.IntegerField()),
                ('gacha_odds', models.TextField()),
                ('gacha_odds_star2', models.TextField()),
                ('gacha_type', models.IntegerField()),
                ('movie_id', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('ticket_id', models.IntegerField()),
            ],
            options={
                'db_table': 'gacha_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GiftMessage',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('discription', models.TextField()),
                ('type_1', models.IntegerField()),
                ('type_2', models.IntegerField()),
                ('type_3', models.IntegerField()),
                ('type_4', models.IntegerField()),
            ],
            options={
                'db_table': 'gift_message',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GoldsetData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('buy_count', models.IntegerField()),
                ('use_jewel_count', models.IntegerField()),
                ('get_gold_count', models.IntegerField()),
                ('goldset_odds_1', models.IntegerField()),
                ('goldset_odds_2', models.IntegerField()),
                ('goldset_odds_3', models.IntegerField()),
                ('additional_gold_min_rate', models.IntegerField()),
                ('additional_gold_max_rate', models.IntegerField()),
            ],
            options={
                'db_table': 'goldset_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GoldsetDataTeamlevel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_level', models.IntegerField()),
                ('initial_get_gold_count', models.IntegerField()),
            ],
            options={
                'db_table': 'goldset_data_teamlevel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GrandArenaDailyRankReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'grand_arena_daily_rank_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GrandArenaDefenceReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('limit_count', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'grand_arena_defence_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GrandArenaMaxRankReward',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rank_from', models.IntegerField()),
                ('rank_to', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'grand_arena_max_rank_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Guild',
            fields=[
                ('guild_id', models.IntegerField(primary_key=True, serialize=False)),
                ('guild_name', models.TextField()),
                ('description', models.TextField()),
                ('guild_master', models.IntegerField()),
                ('member1', models.IntegerField()),
                ('member2', models.IntegerField()),
                ('member3', models.IntegerField()),
                ('member4', models.IntegerField()),
                ('member5', models.IntegerField()),
                ('member6', models.IntegerField()),
                ('member7', models.IntegerField()),
                ('member8', models.IntegerField()),
                ('member9', models.IntegerField()),
                ('member10', models.IntegerField()),
            ],
            options={
                'db_table': 'guild',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemData',
            fields=[
                ('item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('item_name', models.TextField()),
                ('description', models.TextField()),
                ('promotion_level', models.IntegerField()),
                ('item_type', models.IntegerField()),
                ('value', models.IntegerField()),
                ('price', models.IntegerField()),
                ('limit_num', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'item_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lipsync',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voice_id', models.TextField(unique=True)),
                ('time', models.TextField()),
                ('is_enable', models.IntegerField()),
            ],
            options={
                'db_table': 'lipsync',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoginBonusData',
            fields=[
                ('login_bonus_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('login_bonus_type', models.IntegerField()),
                ('count_num', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('bg_id', models.IntegerField()),
            ],
            options={
                'db_table': 'login_bonus_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoginBonusDetail',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('login_bonus_id', models.IntegerField()),
                ('count', models.IntegerField()),
                ('reward_type', models.IntegerField()),
                ('reward_id', models.IntegerField()),
                ('reward_num', models.IntegerField()),
            ],
            options={
                'db_table': 'login_bonus_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoveChara',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('love_level', models.IntegerField()),
                ('total_love', models.IntegerField()),
                ('unlocked_class', models.IntegerField()),
                ('rarity', models.IntegerField()),
            ],
            options={
                'db_table': 'love_chara',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MissionRewardData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mission_reward_id', models.IntegerField()),
                ('reward_type', models.IntegerField()),
                ('reward_id', models.IntegerField(blank=True, null=True)),
                ('reward_num', models.IntegerField()),
            ],
            options={
                'db_table': 'mission_reward_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('movie_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_group_id', models.IntegerField()),
                ('story_id', models.IntegerField()),
                ('bgm_id', models.TextField()),
                ('se_id', models.TextField()),
            ],
            options={
                'db_table': 'movie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NaviComment',
            fields=[
                ('comment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('where_type', models.IntegerField()),
                ('character_id', models.IntegerField()),
                ('face_type', models.IntegerField()),
                ('character_name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('voice_id', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'navi_comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PositionSetting',
            fields=[
                ('position_setting_id', models.IntegerField(primary_key=True, serialize=False)),
                ('front', models.IntegerField()),
                ('middle', models.IntegerField()),
            ],
            options={
                'db_table': 'position_setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestAreaData',
            fields=[
                ('area_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area_name', models.TextField()),
                ('map_type', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'quest_area_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestConditionData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('condition_quest_id_1', models.IntegerField()),
                ('condition_quest_id_2', models.IntegerField()),
                ('condition_quest_id_3', models.IntegerField()),
                ('condition_quest_id_4', models.IntegerField()),
                ('condition_quest_id_5', models.IntegerField()),
                ('release_quest_id_1', models.IntegerField()),
                ('release_quest_id_2', models.IntegerField()),
                ('release_quest_id_3', models.IntegerField()),
                ('release_quest_id_4', models.IntegerField()),
                ('release_quest_id_5', models.IntegerField()),
            ],
            options={
                'db_table': 'quest_condition_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area_id', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('limit_team_level', models.IntegerField()),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('icon_id', models.IntegerField()),
                ('stamina', models.IntegerField()),
                ('stamina_start', models.IntegerField()),
                ('team_exp', models.IntegerField()),
                ('unit_exp', models.IntegerField()),
                ('love', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('daily_limit', models.IntegerField()),
                ('clear_reward_group', models.IntegerField()),
                ('rank_reward_group', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_group_id_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('story_id_wavestart_1', models.IntegerField()),
                ('story_id_waveend_1', models.IntegerField()),
                ('background_2', models.IntegerField()),
                ('wave_group_id_2', models.IntegerField()),
                ('wave_bgm_sheet_id_2', models.TextField()),
                ('wave_bgm_que_id_2', models.TextField()),
                ('story_id_wavestart_2', models.IntegerField()),
                ('story_id_waveend_2', models.IntegerField()),
                ('background_3', models.IntegerField()),
                ('wave_group_id_3', models.IntegerField()),
                ('wave_bgm_sheet_id_3', models.TextField()),
                ('wave_bgm_que_id_3', models.TextField()),
                ('story_id_wavestart_3', models.IntegerField()),
                ('story_id_waveend_3', models.IntegerField()),
                ('enemy_image_1', models.IntegerField()),
                ('enemy_image_2', models.IntegerField()),
                ('enemy_image_3', models.IntegerField()),
                ('enemy_image_4', models.IntegerField()),
                ('enemy_image_5', models.IntegerField()),
                ('reward_image_1', models.IntegerField()),
                ('reward_image_2', models.IntegerField()),
                ('reward_image_3', models.IntegerField()),
                ('reward_image_4', models.IntegerField()),
                ('reward_image_5', models.IntegerField()),
                ('quest_detail_bg_id', models.IntegerField()),
                ('quest_detail_bg_position', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'quest_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestDefeatNotice',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('image_id', models.IntegerField()),
                ('required_team_level', models.IntegerField()),
                ('required_quest_id', models.IntegerField()),
            ],
            options={
                'db_table': 'quest_defeat_notice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestRewardData',
            fields=[
                ('reward_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_num_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_num_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_num_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('reward_num_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('reward_num_5', models.IntegerField()),
            ],
            options={
                'db_table': 'quest_reward_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResistData',
            fields=[
                ('resist_status_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ailment_1', models.IntegerField()),
                ('ailment_2', models.IntegerField()),
                ('ailment_3', models.IntegerField()),
                ('ailment_4', models.IntegerField()),
                ('ailment_5', models.IntegerField()),
                ('ailment_6', models.IntegerField()),
                ('ailment_7', models.IntegerField()),
                ('ailment_8', models.IntegerField()),
                ('ailment_9', models.IntegerField()),
                ('ailment_10', models.IntegerField()),
                ('ailment_11', models.IntegerField()),
                ('ailment_12', models.IntegerField()),
                ('ailment_13', models.IntegerField()),
                ('ailment_14', models.IntegerField()),
                ('ailment_15', models.IntegerField()),
                ('ailment_16', models.IntegerField()),
                ('ailment_17', models.IntegerField()),
                ('ailment_18', models.IntegerField()),
            ],
            options={
                'db_table': 'resist_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RewardCollectGuide',
            fields=[
                ('object_id', models.IntegerField(primary_key=True, serialize=False)),
                ('quest_id_1', models.IntegerField()),
                ('quest_id_2', models.IntegerField()),
                ('quest_id_3', models.IntegerField()),
                ('quest_id_4', models.IntegerField()),
                ('quest_id_5', models.IntegerField()),
                ('quest_id_6', models.IntegerField()),
                ('quest_id_7', models.IntegerField()),
                ('quest_id_8', models.IntegerField()),
                ('quest_id_9', models.IntegerField()),
                ('quest_id_10', models.IntegerField()),
                ('system_id_1', models.IntegerField()),
                ('system_id_2', models.IntegerField()),
                ('system_id_3', models.IntegerField()),
                ('system_id_4', models.IntegerField()),
                ('system_id_5', models.IntegerField()),
            ],
            options={
                'db_table': 'reward_collect_guide',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomChange',
            fields=[
                ('room_item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('change_id', models.IntegerField()),
                ('change_start', models.TextField()),
                ('change_end', models.TextField()),
            ],
            options={
                'db_table': 'room_change',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomCharacterPersonality',
            fields=[
                ('character_id', models.IntegerField(primary_key=True, serialize=False)),
                ('personality_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room_character_personality',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomChatFormation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_1_x', models.IntegerField()),
                ('unit_1_y', models.IntegerField()),
                ('unit_1_dir', models.IntegerField()),
                ('unit_2_x', models.IntegerField()),
                ('unit_2_y', models.IntegerField()),
                ('unit_2_dir', models.IntegerField()),
                ('unit_3_x', models.IntegerField(blank=True, null=True)),
                ('unit_3_y', models.IntegerField(blank=True, null=True)),
                ('unit_3_dir', models.IntegerField(blank=True, null=True)),
                ('unit_4_x', models.IntegerField(blank=True, null=True)),
                ('unit_4_y', models.IntegerField(blank=True, null=True)),
                ('unit_4_dir', models.IntegerField(blank=True, null=True)),
                ('unit_5_x', models.IntegerField(blank=True, null=True)),
                ('unit_5_y', models.IntegerField(blank=True, null=True)),
                ('unit_5_dir', models.IntegerField(blank=True, null=True)),
                ('unit_num', models.IntegerField()),
            ],
            options={
                'db_table': 'room_chat_formation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomChatInfo',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('formation_id', models.IntegerField()),
                ('scenario_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room_chat_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomChatScenario',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('scenario_idx', models.IntegerField()),
                ('unit_pos_no', models.IntegerField()),
                ('delay', models.IntegerField()),
                ('affect_type', models.IntegerField()),
                ('anime_id', models.IntegerField()),
                ('icon_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room_chat_scenario',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomEffect',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('reward_get', models.IntegerField()),
            ],
            options={
                'db_table': 'room_effect',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomEffectRewardGet',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('level', models.IntegerField()),
                ('reward_type', models.IntegerField()),
                ('reward_id', models.IntegerField()),
                ('max_count', models.IntegerField()),
                ('inc_step', models.IntegerField()),
                ('interval_second', models.IntegerField()),
            ],
            options={
                'db_table': 'room_effect_reward_get',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomEmotionIcon',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('enable_auto', models.IntegerField()),
                ('enable_tap', models.IntegerField()),
            ],
            options={
                'db_table': 'room_emotion_icon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomItem',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('item_type', models.IntegerField()),
                ('category', models.IntegerField()),
                ('name', models.TextField()),
                ('max_level', models.IntegerField()),
                ('enable_remove', models.IntegerField()),
                ('max_possession_num', models.IntegerField()),
                ('effect_id_1', models.IntegerField()),
                ('shop_start', models.TextField()),
                ('shop_end', models.TextField()),
                ('shop_new_disp_end', models.TextField()),
                ('cost_item_num', models.IntegerField()),
                ('shop_open_type', models.IntegerField()),
                ('shop_open_id', models.IntegerField()),
                ('shop_open_value', models.IntegerField()),
                ('sold_price', models.IntegerField()),
                ('sort', models.IntegerField()),
            ],
            options={
                'db_table': 'room_item',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomItemAnnouncement',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('announcement_start', models.TextField()),
                ('announcement_end', models.TextField()),
            ],
            options={
                'db_table': 'room_item_announcement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomItemDetail',
            fields=[
                ('room_item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('level', models.IntegerField()),
                ('item_detail', models.TextField()),
                ('lvup_trigger_type', models.IntegerField()),
                ('lvup_trigger_id', models.IntegerField()),
                ('lvup_trigger_value', models.IntegerField()),
                ('lvup_item1_type', models.IntegerField()),
                ('lvup_item1_id', models.IntegerField()),
                ('lvup_item1_num', models.IntegerField()),
                ('lvup_time', models.IntegerField()),
            ],
            options={
                'db_table': 'room_item_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomReleaseData',
            fields=[
                ('system_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_id', models.IntegerField()),
                ('pre_story_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room_release_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomSetup',
            fields=[
                ('room_item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('grid_height', models.IntegerField()),
                ('grid_width', models.IntegerField()),
                ('unit_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room_setup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomUnitComments',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('trigger', models.IntegerField()),
                ('voice_id', models.IntegerField()),
                ('beloved_step', models.IntegerField()),
                ('time', models.IntegerField()),
                ('face_id', models.IntegerField()),
                ('description', models.TextField()),
                ('insert_word_type', models.IntegerField()),
            ],
            options={
                'db_table': 'room_unit_comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeasonPack',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mission_id', models.IntegerField()),
                ('disp_order', models.IntegerField()),
                ('category_icon', models.IntegerField()),
                ('receive_text', models.TextField()),
                ('after_text', models.TextField()),
                ('term', models.IntegerField()),
                ('repurchase_day', models.IntegerField()),
                ('system_id_1', models.IntegerField()),
                ('add_num_1', models.IntegerField()),
                ('item_record_id', models.IntegerField()),
            ],
            options={
                'db_table': 'season_pack',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShopStaticPriceGroup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('price_group_id', models.IntegerField()),
                ('buy_count_from', models.IntegerField()),
                ('buy_count_to', models.IntegerField()),
                ('count', models.IntegerField()),
            ],
            options={
                'db_table': 'shop_static_price_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillAction',
            fields=[
                ('action_id', models.IntegerField(primary_key=True, serialize=False)),
                ('class_id', models.IntegerField()),
                ('action_type', models.IntegerField()),
                ('action_detail_1', models.IntegerField()),
                ('action_detail_2', models.IntegerField()),
                ('action_detail_3', models.IntegerField()),
                ('action_value_1', models.FloatField()),
                ('action_value_2', models.FloatField()),
                ('action_value_3', models.FloatField()),
                ('action_value_4', models.FloatField()),
                ('action_value_5', models.FloatField()),
                ('action_value_6', models.FloatField()),
                ('action_value_7', models.FloatField()),
                ('target_assignment', models.IntegerField()),
                ('target_area', models.IntegerField()),
                ('target_range', models.IntegerField()),
                ('target_type', models.IntegerField()),
                ('target_number', models.IntegerField()),
                ('target_count', models.IntegerField()),
                ('description', models.TextField()),
                ('level_up_disp', models.TextField()),
            ],
            options={
                'db_table': 'skill_action',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_level', models.IntegerField()),
                ('cost', models.IntegerField()),
            ],
            options={
                'db_table': 'skill_cost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillData',
            fields=[
                ('skill_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('skill_type', models.IntegerField()),
                ('skill_area_width', models.IntegerField()),
                ('skill_cast_time', models.FloatField()),
                ('action_1', models.IntegerField()),
                ('action_2', models.IntegerField()),
                ('action_3', models.IntegerField()),
                ('action_4', models.IntegerField()),
                ('action_5', models.IntegerField()),
                ('action_6', models.IntegerField()),
                ('action_7', models.IntegerField()),
                ('depend_action_1', models.IntegerField()),
                ('depend_action_2', models.IntegerField()),
                ('depend_action_3', models.IntegerField()),
                ('depend_action_4', models.IntegerField()),
                ('depend_action_5', models.IntegerField()),
                ('depend_action_6', models.IntegerField()),
                ('depend_action_7', models.IntegerField()),
                ('description', models.TextField()),
                ('icon_type', models.IntegerField()),
            ],
            options={
                'db_table': 'skill_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkipMonsterData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area_id', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('wave_group_id_1', models.IntegerField()),
                ('bg_skip_id', models.IntegerField()),
            ],
            options={
                'db_table': 'skip_monster_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SqliteStat1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tbl', models.TextField(blank=True, null=True)),
                ('idx', models.TextField(blank=True, null=True)),
                ('stat', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sqlite_stat1',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stamp',
            fields=[
                ('stamp_id', models.IntegerField(primary_key=True, serialize=False)),
                ('disp_order', models.IntegerField()),
                ('description', models.TextField()),
                ('start_date', models.TextField()),
                ('end_date', models.TextField()),
            ],
            options={
                'db_table': 'stamp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StationaryMissionData',
            fields=[
                ('stationary_mission_id', models.IntegerField(primary_key=True, serialize=False)),
                ('disp_group', models.IntegerField()),
                ('category_icon', models.IntegerField()),
                ('description', models.TextField()),
                ('mission_condition', models.IntegerField()),
                ('condition_value_1', models.IntegerField(blank=True, null=True)),
                ('condition_value_2', models.IntegerField(blank=True, null=True)),
                ('condition_value_3', models.IntegerField(blank=True, null=True)),
                ('condition_num', models.IntegerField()),
                ('mission_reward_id', models.IntegerField()),
                ('system_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'stationary_mission_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Still',
            fields=[
                ('still_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_group_id', models.IntegerField()),
                ('story_id', models.IntegerField()),
                ('still_group_id', models.IntegerField()),
                ('vertical_still_flg', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('unit_id_1', models.IntegerField()),
                ('unit_id_2', models.IntegerField()),
                ('unit_id_3', models.IntegerField()),
                ('unit_id_4', models.IntegerField()),
                ('unit_id_5', models.IntegerField()),
                ('unit_id_6', models.IntegerField()),
                ('unit_id_7', models.IntegerField()),
                ('unit_id_8', models.IntegerField()),
                ('unit_id_9', models.IntegerField()),
                ('unit_id_10', models.IntegerField()),
                ('facial_id', models.IntegerField()),
            ],
            options={
                'db_table': 'still',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StoryCharacterMask',
            fields=[
                ('chara_id', models.IntegerField(primary_key=True, serialize=False)),
                ('offset', models.FloatField()),
                ('size', models.FloatField()),
                ('softness', models.FloatField()),
            ],
            options={
                'db_table': 'story_character_mask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StoryData',
            fields=[
                ('story_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_type', models.IntegerField()),
                ('value', models.IntegerField()),
                ('title', models.TextField()),
                ('thumbnail_id', models.IntegerField()),
                ('disp_order', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'story_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StoryDetail',
            fields=[
                ('story_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_group_id', models.IntegerField()),
                ('title', models.TextField()),
                ('sub_title', models.TextField()),
                ('visible_type', models.IntegerField()),
                ('story_end', models.IntegerField()),
                ('pre_story_id', models.IntegerField()),
                ('love_level', models.IntegerField()),
                ('requirement_id', models.IntegerField()),
                ('unlock_quest_id', models.IntegerField()),
                ('story_quest_id', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_value_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_value_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_value_3', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'story_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StoryQuestData',
            fields=[
                ('story_quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_id', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('limit_time', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_group_id_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('background_2', models.IntegerField()),
                ('wave_group_id_2', models.IntegerField()),
                ('wave_bgm_sheet_id_2', models.TextField()),
                ('wave_bgm_que_id_2', models.TextField()),
                ('background_3', models.IntegerField()),
                ('wave_group_id_3', models.IntegerField()),
                ('wave_bgm_sheet_id_3', models.TextField()),
                ('wave_bgm_que_id_3', models.TextField()),
                ('guest_unit_1', models.IntegerField()),
                ('guest_unit_2', models.IntegerField()),
                ('guest_unit_3', models.IntegerField()),
                ('guest_unit_4', models.IntegerField()),
                ('guest_unit_5', models.IntegerField()),
            ],
            options={
                'db_table': 'story_quest_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tips',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('value', models.IntegerField()),
                ('tips_index', models.IntegerField()),
                ('title', models.TextField()),
            ],
            options={
                'db_table': 'tips',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TrainingQuestData',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area_id', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('limit_team_level', models.IntegerField()),
                ('unlock_quest_id_1', models.IntegerField()),
                ('unlock_quest_id_2', models.IntegerField()),
                ('stamina', models.IntegerField()),
                ('stamina_start', models.IntegerField()),
                ('team_exp', models.IntegerField()),
                ('unit_exp', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('rank_reward_group', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_group_id_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('background_2', models.IntegerField()),
                ('wave_group_id_2', models.IntegerField()),
                ('wave_bgm_sheet_id_2', models.TextField()),
                ('wave_bgm_que_id_2', models.TextField()),
                ('background_3', models.IntegerField()),
                ('wave_group_id_3', models.IntegerField()),
                ('wave_bgm_sheet_id_3', models.TextField()),
                ('wave_bgm_que_id_3', models.TextField()),
                ('enemy_image_1', models.IntegerField()),
                ('enemy_image_2', models.IntegerField()),
                ('enemy_image_3', models.IntegerField()),
                ('enemy_image_4', models.IntegerField()),
                ('enemy_image_5', models.IntegerField()),
                ('reward_image_1', models.IntegerField()),
                ('reward_image_2', models.IntegerField()),
                ('reward_image_3', models.IntegerField()),
                ('reward_image_4', models.IntegerField()),
                ('reward_image_5', models.IntegerField()),
                ('training_quest_detail_bg_id', models.IntegerField()),
                ('training_quest_detail_bg_position', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'training_quest_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitAttackPattern',
            fields=[
                ('pattern_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('loop_start', models.IntegerField()),
                ('loop_end', models.IntegerField()),
                ('atk_pattern_1', models.IntegerField()),
                ('atk_pattern_2', models.IntegerField()),
                ('atk_pattern_3', models.IntegerField()),
                ('atk_pattern_4', models.IntegerField()),
                ('atk_pattern_5', models.IntegerField()),
                ('atk_pattern_6', models.IntegerField()),
                ('atk_pattern_7', models.IntegerField()),
                ('atk_pattern_8', models.IntegerField()),
                ('atk_pattern_9', models.IntegerField()),
                ('atk_pattern_10', models.IntegerField()),
                ('atk_pattern_11', models.IntegerField()),
                ('atk_pattern_12', models.IntegerField()),
                ('atk_pattern_13', models.IntegerField()),
                ('atk_pattern_14', models.IntegerField()),
                ('atk_pattern_15', models.IntegerField()),
                ('atk_pattern_16', models.IntegerField()),
                ('atk_pattern_17', models.IntegerField()),
                ('atk_pattern_18', models.IntegerField()),
                ('atk_pattern_19', models.IntegerField()),
                ('atk_pattern_20', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_attack_pattern',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitBackground',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('bg_id', models.IntegerField()),
                ('bg_name', models.TextField()),
                ('position', models.FloatField()),
                ('face_type', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_background',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitComments',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('use_type', models.IntegerField()),
                ('voice_id', models.IntegerField()),
                ('face_id', models.IntegerField()),
                ('change_time', models.FloatField()),
                ('change_face', models.IntegerField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'unit_comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitData',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('kana', models.TextField()),
                ('prefab_id', models.IntegerField()),
                ('rarity', models.IntegerField()),
                ('motion_type', models.IntegerField()),
                ('se_type', models.IntegerField()),
                ('move_speed', models.IntegerField()),
                ('search_area_width', models.IntegerField()),
                ('atk_type', models.IntegerField()),
                ('normal_atk_cast_time', models.FloatField()),
                ('cutin_1', models.IntegerField()),
                ('cutin_2', models.IntegerField()),
                ('guild_id', models.IntegerField()),
                ('exskill_display', models.IntegerField()),
                ('comment', models.TextField()),
            ],
            options={
                'db_table': 'unit_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitEnemyData',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('prefab_id', models.IntegerField()),
                ('motion_type', models.IntegerField()),
                ('se_type', models.IntegerField()),
                ('move_speed', models.IntegerField()),
                ('search_area_width', models.IntegerField()),
                ('atk_type', models.IntegerField()),
                ('normal_atk_cast_time', models.FloatField()),
                ('cutin', models.IntegerField()),
                ('visual_change_flag', models.IntegerField()),
                ('comment', models.TextField()),
            ],
            options={
                'db_table': 'unit_enemy_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitIntroduction',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('gacha_id', models.IntegerField()),
                ('introduction_number', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('maximum_chunk_size_1', models.IntegerField()),
                ('maximum_chunk_size_loop_1', models.IntegerField()),
                ('maximum_chunk_size_2', models.IntegerField()),
                ('maximum_chunk_size_loop_2', models.IntegerField()),
                ('maximum_chunk_size_3', models.IntegerField()),
                ('maximum_chunk_size_loop_3', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_introduction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitMypagePos',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('scale', models.FloatField()),
            ],
            options={
                'db_table': 'unit_mypage_pos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitProfile',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('age', models.TextField()),
                ('guild', models.TextField()),
                ('race', models.TextField()),
                ('height', models.TextField()),
                ('weight', models.TextField()),
                ('birth_month', models.TextField()),
                ('birth_day', models.TextField()),
                ('blood_type', models.TextField()),
                ('favorite', models.TextField()),
                ('voice', models.TextField()),
                ('voice_id', models.IntegerField()),
                ('catch_copy', models.TextField()),
                ('self_text', models.TextField()),
                ('guild_id', models.TextField()),
            ],
            options={
                'db_table': 'unit_profile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitPromotion',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('promotion_level', models.IntegerField()),
                ('equip_slot_1', models.IntegerField()),
                ('equip_slot_2', models.IntegerField()),
                ('equip_slot_3', models.IntegerField()),
                ('equip_slot_4', models.IntegerField()),
                ('equip_slot_5', models.IntegerField()),
                ('equip_slot_6', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_promotion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitPromotionStatus',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('promotion_level', models.IntegerField()),
                ('hp', models.FloatField()),
                ('atk', models.FloatField()),
                ('magic_str', models.FloatField()),
                ('def_field', models.FloatField(db_column='def')),
                ('magic_def', models.FloatField()),
                ('physical_critical', models.FloatField()),
                ('magic_critical', models.FloatField()),
                ('wave_hp_recovery', models.FloatField()),
                ('wave_energy_recovery', models.FloatField()),
                ('dodge', models.FloatField()),
                ('physical_penetrate', models.FloatField()),
                ('magic_penetrate', models.FloatField()),
                ('life_steal', models.FloatField()),
                ('hp_recovery_rate', models.FloatField()),
                ('energy_recovery_rate', models.FloatField()),
                ('energy_reduce_rate', models.FloatField()),
            ],
            options={
                'db_table': 'unit_promotion_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitRarity',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('rarity', models.IntegerField()),
                ('hp', models.FloatField()),
                ('hp_growth', models.FloatField()),
                ('atk', models.FloatField()),
                ('atk_growth', models.FloatField()),
                ('magic_str', models.FloatField()),
                ('magic_str_growth', models.FloatField()),
                ('def_field', models.FloatField(db_column='def')),
                ('def_growth', models.FloatField()),
                ('magic_def', models.FloatField()),
                ('magic_def_growth', models.FloatField()),
                ('physical_critical', models.FloatField()),
                ('physical_critical_growth', models.FloatField()),
                ('magic_critical', models.FloatField()),
                ('magic_critical_growth', models.FloatField()),
                ('wave_hp_recovery', models.FloatField()),
                ('wave_hp_recovery_growth', models.FloatField()),
                ('wave_energy_recovery', models.FloatField()),
                ('wave_energy_recovery_growth', models.FloatField()),
                ('dodge', models.FloatField()),
                ('dodge_growth', models.FloatField()),
                ('physical_penetrate', models.FloatField()),
                ('physical_penetrate_growth', models.FloatField()),
                ('magic_penetrate', models.FloatField()),
                ('magic_penetrate_growth', models.FloatField()),
                ('life_steal', models.FloatField()),
                ('life_steal_growth', models.FloatField()),
                ('hp_recovery_rate', models.FloatField()),
                ('hp_recovery_rate_growth', models.FloatField()),
                ('energy_recovery_rate', models.FloatField()),
                ('energy_recovery_rate_growth', models.FloatField()),
                ('energy_reduce_rate', models.FloatField()),
                ('energy_reduce_rate_growth', models.FloatField()),
                ('unit_material_id', models.IntegerField()),
                ('consume_num', models.IntegerField()),
                ('consume_gold', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_rarity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitSkillData',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('union_burst', models.IntegerField()),
                ('main_skill_1', models.IntegerField()),
                ('main_skill_2', models.IntegerField()),
                ('main_skill_3', models.IntegerField()),
                ('main_skill_4', models.IntegerField()),
                ('main_skill_5', models.IntegerField()),
                ('main_skill_6', models.IntegerField()),
                ('main_skill_7', models.IntegerField()),
                ('main_skill_8', models.IntegerField()),
                ('main_skill_9', models.IntegerField()),
                ('main_skill_10', models.IntegerField()),
                ('ex_skill_1', models.IntegerField()),
                ('ex_skill_evolution_1', models.IntegerField()),
                ('ex_skill_2', models.IntegerField()),
                ('ex_skill_evolution_2', models.IntegerField()),
                ('ex_skill_3', models.IntegerField()),
                ('ex_skill_evolution_3', models.IntegerField()),
                ('ex_skill_4', models.IntegerField()),
                ('ex_skill_evolution_4', models.IntegerField()),
                ('ex_skill_5', models.IntegerField()),
                ('ex_skill_evolution_5', models.IntegerField()),
                ('sp_skill_1', models.IntegerField()),
                ('sp_skill_2', models.IntegerField()),
                ('sp_skill_3', models.IntegerField()),
                ('sp_skill_4', models.IntegerField()),
                ('sp_skill_5', models.IntegerField()),
            ],
            options={
                'db_table': 'unit_skill_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnitStatusCoefficient',
            fields=[
                ('coefficient_id', models.IntegerField(primary_key=True, serialize=False)),
                ('hp_coefficient', models.FloatField()),
                ('atk_coefficient', models.FloatField()),
                ('magic_str_coefficient', models.FloatField()),
                ('def_coefficient', models.FloatField()),
                ('magic_def_coefficient', models.FloatField()),
                ('physical_critical_coefficient', models.FloatField()),
                ('magic_critical_coefficient', models.FloatField()),
                ('wave_hp_recovery_coefficient', models.FloatField()),
                ('wave_energy_recovery_coefficient', models.FloatField()),
                ('dodge_coefficient', models.FloatField()),
                ('physical_penetrate_coefficient', models.FloatField()),
                ('magic_penetrate_coefficient', models.FloatField()),
                ('life_steal_coefficient', models.FloatField()),
                ('hp_recovery_rate_coefficient', models.FloatField()),
                ('energy_recovery_rate_coefficient', models.FloatField()),
                ('energy_reduce_rate_coefficient', models.FloatField()),
                ('skill_lv_coefficient', models.FloatField()),
                ('exskill_evolution_coefficient', models.IntegerField()),
                ('overall_coefficient', models.FloatField()),
            ],
            options={
                'db_table': 'unit_status_coefficient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnlockSkillData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promotion_level', models.IntegerField()),
                ('unlock_skill', models.IntegerField()),
            ],
            options={
                'db_table': 'unlock_skill_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnlockUnitCondition',
            fields=[
                ('unit_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_name', models.TextField()),
                ('class_id', models.IntegerField()),
                ('pre_unit_id', models.IntegerField()),
                ('condition_type_1', models.IntegerField()),
                ('condition_type_detail_1', models.IntegerField()),
                ('condition_id_1', models.IntegerField()),
                ('count_1', models.IntegerField()),
                ('condition_type_2', models.IntegerField()),
                ('condition_type_detail_2', models.IntegerField()),
                ('condition_id_2', models.IntegerField()),
                ('count_2', models.IntegerField()),
                ('condition_type_3', models.IntegerField()),
                ('condition_type_detail_3', models.IntegerField()),
                ('condition_id_3', models.IntegerField()),
                ('count_3', models.IntegerField()),
                ('condition_type_4', models.IntegerField()),
                ('condition_type_detail_4', models.IntegerField()),
                ('condition_id_4', models.IntegerField()),
                ('count_4', models.IntegerField()),
                ('condition_type_5', models.IntegerField()),
                ('condition_type_detail_5', models.IntegerField()),
                ('condition_id_5', models.IntegerField()),
                ('count_5', models.IntegerField()),
                ('release_effect_type', models.IntegerField()),
            ],
            options={
                'db_table': 'unlock_unit_condition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WaveGroupData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('wave_group_id', models.IntegerField()),
                ('odds', models.IntegerField()),
                ('enemy_id_1', models.IntegerField()),
                ('drop_gold_1', models.IntegerField()),
                ('drop_reward_id_1', models.IntegerField()),
                ('enemy_id_2', models.IntegerField()),
                ('drop_gold_2', models.IntegerField()),
                ('drop_reward_id_2', models.IntegerField()),
                ('enemy_id_3', models.IntegerField()),
                ('drop_gold_3', models.IntegerField()),
                ('drop_reward_id_3', models.IntegerField()),
                ('enemy_id_4', models.IntegerField()),
                ('drop_gold_4', models.IntegerField()),
                ('drop_reward_id_4', models.IntegerField()),
                ('enemy_id_5', models.IntegerField()),
                ('drop_gold_5', models.IntegerField()),
                ('drop_reward_id_5', models.IntegerField()),
            ],
            options={
                'db_table': 'wave_group_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Worldmap',
            fields=[
                ('course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('map_id', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
                ('start_area_id', models.IntegerField()),
                ('end_area_id', models.IntegerField()),
            ],
            options={
                'db_table': 'worldmap',
                'managed': False,
            },
        ),
    ]

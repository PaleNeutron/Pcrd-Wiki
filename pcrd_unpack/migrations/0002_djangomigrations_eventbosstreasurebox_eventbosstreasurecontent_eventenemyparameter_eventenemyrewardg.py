# Generated by Django 2.0.3 on 2018-04-01 09:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pcrd_unpack', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventBossTreasureBox',
            fields=[
                ('event_boss_treasure_box_id', models.IntegerField(primary_key=True, serialize=False)),
                ('treasure_type_1', models.IntegerField()),
                ('event_boss_treasure_content_id_1', models.IntegerField()),
                ('each_odds_1', models.IntegerField()),
                ('treasure_type_2', models.IntegerField()),
                ('event_boss_treasure_content_id_2', models.IntegerField()),
                ('each_odds_2', models.IntegerField()),
                ('treasure_type_3', models.IntegerField()),
                ('event_boss_treasure_content_id_3', models.IntegerField()),
                ('each_odds_3', models.IntegerField()),
                ('treasure_type_4', models.IntegerField()),
                ('event_boss_treasure_content_id_4', models.IntegerField()),
                ('each_odds_4', models.IntegerField()),
                ('treasure_type_5', models.IntegerField()),
                ('event_boss_treasure_content_id_5', models.IntegerField()),
                ('each_odds_5', models.IntegerField()),
                ('treasure_type_6', models.IntegerField()),
                ('event_boss_treasure_content_id_6', models.IntegerField()),
                ('each_odds_6', models.IntegerField()),
                ('treasure_type_7', models.IntegerField()),
                ('event_boss_treasure_content_id_7', models.IntegerField()),
                ('each_odds_7', models.IntegerField()),
                ('treasure_type_8', models.IntegerField()),
                ('event_boss_treasure_content_id_8', models.IntegerField()),
                ('each_odds_8', models.IntegerField()),
                ('treasure_type_9', models.IntegerField()),
                ('event_boss_treasure_content_id_9', models.IntegerField()),
                ('each_odds_9', models.IntegerField()),
                ('treasure_type_10', models.IntegerField()),
                ('event_boss_treasure_content_id_10', models.IntegerField()),
                ('each_odds_10', models.IntegerField()),
            ],
            options={
                'db_table': 'event_boss_treasure_box',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventBossTreasureContent',
            fields=[
                ('event_boss_treasure_content_id', models.IntegerField(primary_key=True, serialize=False)),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('odds_file_1', models.TextField()),
                ('reward_num_1', models.IntegerField()),
                ('odds_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('odds_file_2', models.TextField()),
                ('reward_num_2', models.IntegerField()),
                ('odds_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('odds_file_3', models.TextField()),
                ('reward_num_3', models.IntegerField()),
                ('odds_3', models.IntegerField()),
                ('reward_type_4', models.IntegerField()),
                ('reward_id_4', models.IntegerField()),
                ('odds_file_4', models.TextField()),
                ('reward_num_4', models.IntegerField()),
                ('odds_4', models.IntegerField()),
                ('reward_type_5', models.IntegerField()),
                ('reward_id_5', models.IntegerField()),
                ('odds_file_5', models.TextField()),
                ('reward_num_5', models.IntegerField()),
                ('odds_5', models.IntegerField()),
            ],
            options={
                'db_table': 'event_boss_treasure_content',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventEnemyParameter',
            fields=[
                ('enemy_id', models.IntegerField(primary_key=True, serialize=False)),
                ('unit_id', models.IntegerField()),
                ('level', models.IntegerField()),
                ('rarity', models.IntegerField()),
                ('promotion_level', models.IntegerField()),
                ('hp', models.IntegerField()),
                ('atk', models.IntegerField()),
                ('magic_str', models.IntegerField()),
                ('def_field', models.IntegerField(db_column='def')),
                ('magic_def', models.IntegerField()),
                ('physical_critical', models.IntegerField()),
                ('magic_critical', models.IntegerField()),
                ('wave_hp_recovery', models.IntegerField()),
                ('wave_energy_recovery', models.IntegerField()),
                ('dodge', models.IntegerField()),
                ('physical_penetrate', models.IntegerField()),
                ('magic_penetrate', models.IntegerField()),
                ('life_steal', models.IntegerField()),
                ('hp_recovery_rate', models.IntegerField()),
                ('energy_recovery_rate', models.IntegerField()),
                ('energy_reduce_rate', models.IntegerField()),
                ('union_burst_level', models.IntegerField()),
                ('main_skill_lv_1', models.IntegerField()),
                ('main_skill_lv_2', models.IntegerField()),
                ('main_skill_lv_3', models.IntegerField()),
                ('main_skill_lv_4', models.IntegerField()),
                ('main_skill_lv_5', models.IntegerField()),
                ('main_skill_lv_6', models.IntegerField()),
                ('main_skill_lv_7', models.IntegerField()),
                ('main_skill_lv_8', models.IntegerField()),
                ('main_skill_lv_9', models.IntegerField()),
                ('main_skill_lv_10', models.IntegerField()),
                ('ex_skill_lv_1', models.IntegerField()),
                ('ex_skill_lv_2', models.IntegerField()),
                ('ex_skill_lv_3', models.IntegerField()),
                ('ex_skill_lv_4', models.IntegerField()),
                ('ex_skill_lv_5', models.IntegerField()),
                ('resist_status_id', models.IntegerField()),
            ],
            options={
                'db_table': 'event_enemy_parameter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventEnemyRewardGroup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('reward_group_id', models.IntegerField()),
                ('reward_type', models.IntegerField()),
                ('reward_id', models.IntegerField()),
                ('reward_num', models.IntegerField()),
                ('odds', models.IntegerField()),
            ],
            options={
                'db_table': 'event_enemy_reward_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventGachaData',
            fields=[
                ('gacha_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('gacha_name', models.TextField()),
                ('item_type', models.IntegerField()),
                ('item_id', models.IntegerField()),
                ('cost', models.IntegerField()),
                ('repeat_step', models.IntegerField()),
            ],
            options={
                'db_table': 'event_gacha_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventIntroduction',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('introduction_number', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('maximum_chunk_size_1', models.IntegerField()),
                ('maximum_chunk_size_loop_1', models.IntegerField()),
                ('maximum_chunk_size_2', models.IntegerField()),
                ('maximum_chunk_size_loop_2', models.IntegerField()),
                ('maximum_chunk_size_3', models.IntegerField()),
                ('maximum_chunk_size_loop_3', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
            ],
            options={
                'db_table': 'event_introduction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventNaviComment',
            fields=[
                ('comment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('where_type', models.IntegerField()),
                ('character_id', models.IntegerField()),
                ('face_type', models.IntegerField()),
                ('character_name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('voice_id', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('change_face_time', models.FloatField()),
                ('change_face_type', models.IntegerField()),
                ('event_id', models.IntegerField()),
            ],
            options={
                'db_table': 'event_navi_comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventStoryDetail',
            fields=[
                ('story_id', models.IntegerField(primary_key=True, serialize=False)),
                ('story_group_id', models.IntegerField()),
                ('title', models.TextField()),
                ('sub_title', models.TextField()),
                ('visible_type', models.IntegerField()),
                ('story_end', models.IntegerField()),
                ('pre_story_id', models.IntegerField()),
                ('love_level', models.IntegerField()),
                ('requirement_id', models.IntegerField()),
                ('unlock_quest_id', models.IntegerField()),
                ('story_quest_id', models.IntegerField()),
                ('reward_type_1', models.IntegerField()),
                ('reward_id_1', models.IntegerField()),
                ('reward_value_1', models.IntegerField()),
                ('reward_type_2', models.IntegerField()),
                ('reward_id_2', models.IntegerField()),
                ('reward_value_2', models.IntegerField()),
                ('reward_type_3', models.IntegerField()),
                ('reward_id_3', models.IntegerField()),
                ('reward_value_3', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'event_story_detail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventWaveGroupData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('wave_group_id', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('wave', models.IntegerField()),
                ('match_lv_min', models.IntegerField()),
                ('match_lv_max', models.IntegerField()),
                ('enemy_id_1', models.IntegerField()),
                ('enemy_id_2', models.IntegerField()),
                ('enemy_id_3', models.IntegerField()),
                ('enemy_id_4', models.IntegerField()),
                ('enemy_id_5', models.IntegerField()),
                ('drop_gold_1', models.IntegerField()),
                ('reward_group_id_1', models.IntegerField()),
                ('disp_reward_type_1', models.IntegerField()),
                ('disp_reward_id_1', models.IntegerField()),
                ('reward_lot_count_1', models.IntegerField()),
                ('reward_odds_1', models.IntegerField()),
                ('drop_gold_2', models.IntegerField()),
                ('reward_group_id_2', models.IntegerField()),
                ('disp_reward_type_2', models.IntegerField()),
                ('disp_reward_id_2', models.IntegerField()),
                ('reward_lot_count_2', models.IntegerField()),
                ('reward_odds_2', models.IntegerField()),
                ('drop_gold_3', models.IntegerField()),
                ('reward_group_id_3', models.IntegerField()),
                ('disp_reward_type_3', models.IntegerField()),
                ('disp_reward_id_3', models.IntegerField()),
                ('reward_lot_count_3', models.IntegerField()),
                ('reward_odds_3', models.IntegerField()),
                ('drop_gold_4', models.IntegerField()),
                ('reward_group_id_4', models.IntegerField()),
                ('disp_reward_type_4', models.IntegerField()),
                ('disp_reward_id_4', models.IntegerField()),
                ('reward_lot_count_4', models.IntegerField()),
                ('reward_odds_4', models.IntegerField()),
                ('drop_gold_5', models.IntegerField()),
                ('reward_group_id_5', models.IntegerField()),
                ('disp_reward_type_5', models.IntegerField()),
                ('disp_reward_id_5', models.IntegerField()),
                ('reward_lot_count_5', models.IntegerField()),
                ('reward_odds_5', models.IntegerField()),
            ],
            options={
                'db_table': 'event_wave_group_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneBoss',
            fields=[
                ('boss_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('area_id', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('boss_position_x', models.IntegerField()),
                ('boss_position_y', models.IntegerField()),
                ('result_boss_position_y', models.IntegerField()),
                ('icon_id', models.IntegerField()),
                ('use_ticket_num', models.IntegerField()),
                ('team_exp', models.IntegerField()),
                ('unit_exp', models.IntegerField()),
                ('love', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('daily_limit', models.IntegerField()),
                ('clear_reward_group', models.IntegerField()),
                ('event_boss_treasure_box_id_1', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_group_id_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('story_id_wavestart_1', models.IntegerField()),
                ('story_id_waveend_1', models.IntegerField()),
                ('detail_bg_id', models.IntegerField()),
                ('detail_bg_position', models.IntegerField()),
                ('detail_boss_bg_size', models.IntegerField()),
                ('detail_boss_bg_height', models.IntegerField()),
                ('reward_gold_coefficient', models.TextField()),
                ('reward_gold_limit', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_boss',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneBossCondition',
            fields=[
                ('boss_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('condition_quest_id_1', models.IntegerField()),
                ('condition_quest_id_2', models.IntegerField()),
                ('condition_boss_id_1', models.IntegerField()),
                ('condition_boss_id_2', models.IntegerField()),
                ('force_unlock_time', models.TextField()),
                ('release_quest_id_1', models.IntegerField()),
                ('release_quest_id_2', models.IntegerField()),
                ('release_boss_id_1', models.IntegerField()),
                ('release_boss_id_2', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_boss_condition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneDailyMissionData',
            fields=[
                ('daily_mission_id', models.IntegerField(primary_key=True, serialize=False)),
                ('disp_group', models.IntegerField()),
                ('category_icon', models.IntegerField()),
                ('description', models.TextField()),
                ('mission_condition', models.IntegerField()),
                ('condition_value_1', models.IntegerField(blank=True, null=True)),
                ('condition_value_2', models.IntegerField(blank=True, null=True)),
                ('condition_value_3', models.IntegerField(blank=True, null=True)),
                ('condition_num', models.IntegerField()),
                ('mission_reward_id', models.IntegerField()),
                ('system_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_daily_mission_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneDescription',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('type', models.IntegerField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_description',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneItem',
            fields=[
                ('event_id', models.IntegerField(primary_key=True, serialize=False)),
                ('boss_ticket_id', models.IntegerField()),
                ('gacha_ticket_id', models.IntegerField()),
                ('unit_material_id_1', models.IntegerField()),
                ('unit_material_id_2', models.IntegerField()),
                ('unit_material_id_3', models.IntegerField()),
                ('unit_material_id_4', models.IntegerField()),
                ('unit_material_id_5', models.IntegerField()),
                ('unit_material_id_6', models.IntegerField()),
                ('unit_material_id_7', models.IntegerField()),
                ('unit_material_id_8', models.IntegerField()),
                ('unit_material_id_9', models.IntegerField()),
                ('unit_material_id_10', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_item',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneMap',
            fields=[
                ('course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('name', models.TextField()),
                ('map_id', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
                ('start_area_id', models.IntegerField()),
                ('end_area_id', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_map',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneMissionRewardData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mission_reward_id', models.IntegerField()),
                ('reward_type', models.IntegerField()),
                ('reward_id', models.IntegerField(blank=True, null=True)),
                ('reward_num', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_mission_reward_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneQuest',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('area_id', models.IntegerField()),
                ('quest_seq', models.IntegerField()),
                ('quest_name', models.TextField()),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('icon_id', models.IntegerField()),
                ('stamina', models.IntegerField()),
                ('stamina_start', models.IntegerField()),
                ('team_exp', models.IntegerField()),
                ('unit_exp', models.IntegerField()),
                ('love', models.IntegerField()),
                ('limit_time', models.IntegerField()),
                ('daily_limit', models.IntegerField()),
                ('clear_reward_group', models.IntegerField()),
                ('rank_reward_group', models.IntegerField()),
                ('drop_reward_type', models.IntegerField()),
                ('drop_reward_id', models.IntegerField()),
                ('drop_reward_num', models.IntegerField()),
                ('drop_reward_odds', models.IntegerField()),
                ('background_1', models.IntegerField()),
                ('wave_bgm_sheet_id_1', models.TextField()),
                ('wave_bgm_que_id_1', models.TextField()),
                ('story_id_wavestart_1', models.IntegerField()),
                ('story_id_waveend_1', models.IntegerField()),
                ('background_2', models.IntegerField()),
                ('wave_bgm_sheet_id_2', models.TextField()),
                ('wave_bgm_que_id_2', models.TextField()),
                ('story_id_wavestart_2', models.IntegerField()),
                ('story_id_waveend_2', models.IntegerField()),
                ('background_3', models.IntegerField()),
                ('wave_bgm_sheet_id_3', models.TextField()),
                ('wave_bgm_que_id_3', models.TextField()),
                ('story_id_wavestart_3', models.IntegerField()),
                ('story_id_waveend_3', models.IntegerField()),
                ('quest_detail_bg_id', models.IntegerField()),
                ('quest_detail_bg_position', models.IntegerField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_quest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneQuestArea',
            fields=[
                ('area_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('area_name', models.TextField()),
                ('map_type', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_quest_area',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneQuestCondition',
            fields=[
                ('quest_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('condition_quest_id_1', models.IntegerField()),
                ('condition_quest_id_2', models.IntegerField()),
                ('condition_boss_id_1', models.IntegerField()),
                ('condition_boss_id_2', models.IntegerField()),
                ('release_quest_id_1', models.IntegerField()),
                ('release_quest_id_2', models.IntegerField()),
                ('release_boss_id_1', models.IntegerField()),
                ('release_boss_id_2', models.IntegerField()),
                ('condition_main_quest_id', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_quest_condition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneSchedule',
            fields=[
                ('event_id', models.IntegerField(primary_key=True, serialize=False)),
                ('teaser_time', models.TextField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('close_time', models.TextField()),
                ('background', models.IntegerField()),
                ('sheet_id', models.TextField()),
                ('que_id', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneStationaryMissionData',
            fields=[
                ('stationary_mission_id', models.IntegerField(primary_key=True, serialize=False)),
                ('disp_group', models.IntegerField()),
                ('category_icon', models.IntegerField()),
                ('description', models.TextField()),
                ('mission_condition', models.IntegerField()),
                ('condition_value_1', models.IntegerField(blank=True, null=True)),
                ('condition_value_2', models.IntegerField(blank=True, null=True)),
                ('condition_value_3', models.IntegerField(blank=True, null=True)),
                ('condition_num', models.IntegerField()),
                ('mission_reward_id', models.IntegerField()),
                ('system_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
            ],
            options={
                'db_table': 'hatsune_stationary_mission_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HatsuneUnlockStoryCondition',
            fields=[
                ('story_id', models.IntegerField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('condition_entry', models.IntegerField()),
                ('condition_quest_id', models.IntegerField()),
                ('condition_boss_id', models.IntegerField()),
            ],
            options={
                'db_table': 'hatsune_unlock_story_condition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OddsNameData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('odds_file', models.TextField()),
                ('name', models.TextField()),
                ('icon_type', models.IntegerField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'odds_name_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PcrdUnpackQuestrewarddatacustom',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rate', models.FloatField()),
                ('equipment_id', models.IntegerField(blank=True, null=True)),
                ('item_id', models.IntegerField(blank=True, null=True)),
                ('quest_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pcrd_unpack_questrewarddatacustom',
                'managed': False,
            },
        ),
    ]
